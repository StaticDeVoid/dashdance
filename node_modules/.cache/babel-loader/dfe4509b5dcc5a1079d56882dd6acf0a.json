{"ast":null,"code":"import DOMPurify from \"dompurify\";\nexport function isTextValid(text) {\n  return Boolean(DOMPurify.sanitize(text, {\n    ALLOWED_TAGS: []\n  }).trim());\n}\nexport function validate(input = \"\", type = \"custom\", {\n  min_length: min = 1,\n  max_length: max = 70,\n  regex: reg = null,\n  identifier = null\n} = {}) {\n  identifier = identifier || `input {${type}}`;\n  input = input.toString().trim();\n  const regexes = {\n    username: RegExp(`^[_a-zA-Z0-9]{${min},${max}}$`),\n    password: RegExp(`^\\\\S{${min},${max}}$`),\n    name: RegExp(`^.{${min},${max}}$`)\n  };\n\n  if (!reg) {\n    reg = regexes[type];\n  }\n\n  if (reg) {\n    if (!reg.test(input)) {\n      throw Error(`${identifier} must match regex: ${reg} (range between ${min} and ${max} characters)`);\n    }\n  }\n\n  if (type === \"html\") {\n    input = DOMPurify.sanitize(input, {\n      ALLOWED_TAGS: [\"b\"]\n    }).trim();\n  }\n\n  if (input.length > max || input.length < min) {\n    throw Error(`${identifier} must be minimum ${min} and maximum ${max} characters`);\n  }\n\n  if (input.includes(\"\\n\")) {\n    input = input.replace(/\\n+/g, \"\\n\").trim();\n  }\n\n  return input;\n}","map":{"version":3,"sources":["C:/Users/twist/OneDrive/Documents/react/build-twitter-with-react/src/utils/validate.js"],"names":["DOMPurify","isTextValid","text","Boolean","sanitize","ALLOWED_TAGS","trim","validate","input","type","min_length","min","max_length","max","regex","reg","identifier","toString","regexes","username","RegExp","password","name","test","Error","length","includes","replace"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AAEA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAChC,SAAOC,OAAO,CAACH,SAAS,CAACI,QAAV,CAAmBF,IAAnB,EAAyB;AAAEG,IAAAA,YAAY,EAAE;AAAhB,GAAzB,EAA+CC,IAA/C,EAAD,CAAd;AACD;AAED,OAAO,SAASC,QAAT,CACLC,KAAK,GAAG,EADH,EAELC,IAAI,GAAG,QAFF,EAGL;AACEC,EAAAA,UAAU,EAAEC,GAAG,GAAG,CADpB;AAEEC,EAAAA,UAAU,EAAEC,GAAG,GAAG,EAFpB;AAGEC,EAAAA,KAAK,EAAEC,GAAG,GAAG,IAHf;AAIEC,EAAAA,UAAU,GAAG;AAJf,IAKI,EARC,EASL;AACAA,EAAAA,UAAU,GAAGA,UAAU,IAAK,UAASP,IAAK,GAA1C;AACAD,EAAAA,KAAK,GAAGA,KAAK,CAACS,QAAN,GAAiBX,IAAjB,EAAR;AACA,QAAMY,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAEC,MAAM,CAAE,iBAAgBT,GAAI,IAAGE,GAAI,IAA7B,CADF;AAEdQ,IAAAA,QAAQ,EAAED,MAAM,CAAE,QAAOT,GAAI,IAAGE,GAAI,IAApB,CAFF;AAGdS,IAAAA,IAAI,EAAEF,MAAM,CAAE,MAAKT,GAAI,IAAGE,GAAI,IAAlB;AAHE,GAAhB;;AAKA,MAAI,CAACE,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAGG,OAAO,CAACT,IAAD,CAAb;AACD;;AACD,MAAIM,GAAJ,EAAS;AACP,QAAI,CAACA,GAAG,CAACQ,IAAJ,CAASf,KAAT,CAAL,EAAsB;AACpB,YAAMgB,KAAK,CACR,GAAER,UAAW,sBAAqBD,GAAI,mBAAkBJ,GAAI,QAAOE,GAAI,cAD/D,CAAX;AAGD;AACF;;AACD,MAAIJ,IAAI,KAAK,MAAb,EAAqB;AACnBD,IAAAA,KAAK,GAAGR,SAAS,CAACI,QAAV,CAAmBI,KAAnB,EAA0B;AAAEH,MAAAA,YAAY,EAAE,CAAC,GAAD;AAAhB,KAA1B,EAAmDC,IAAnD,EAAR;AACD;;AACD,MAAIE,KAAK,CAACiB,MAAN,GAAeZ,GAAf,IAAsBL,KAAK,CAACiB,MAAN,GAAed,GAAzC,EAA8C;AAC5C,UAAMa,KAAK,CACR,GAAER,UAAW,oBAAmBL,GAAI,gBAAeE,GAAI,aAD/C,CAAX;AAGD;;AACD,MAAIL,KAAK,CAACkB,QAAN,CAAe,IAAf,CAAJ,EAA0B;AACxBlB,IAAAA,KAAK,GAAGA,KAAK,CAACmB,OAAN,CAAc,MAAd,EAAsB,IAAtB,EAA4BrB,IAA5B,EAAR;AACD;;AAED,SAAOE,KAAP;AACD","sourcesContent":["import DOMPurify from \"dompurify\";\n\nexport function isTextValid(text) {\n  return Boolean(DOMPurify.sanitize(text, { ALLOWED_TAGS: [] }).trim());\n}\n\nexport function validate(\n  input = \"\",\n  type = \"custom\",\n  {\n    min_length: min = 1,\n    max_length: max = 70,\n    regex: reg = null,\n    identifier = null,\n  } = {}\n) {\n  identifier = identifier || `input {${type}}`;\n  input = input.toString().trim();\n  const regexes = {\n    username: RegExp(`^[_a-zA-Z0-9]{${min},${max}}$`),\n    password: RegExp(`^\\\\S{${min},${max}}$`),\n    name: RegExp(`^.{${min},${max}}$`),\n  };\n  if (!reg) {\n    reg = regexes[type];\n  }\n  if (reg) {\n    if (!reg.test(input)) {\n      throw Error(\n        `${identifier} must match regex: ${reg} (range between ${min} and ${max} characters)`\n      );\n    }\n  }\n  if (type === \"html\") {\n    input = DOMPurify.sanitize(input, { ALLOWED_TAGS: [\"b\"] }).trim();\n  }\n  if (input.length > max || input.length < min) {\n    throw Error(\n      `${identifier} must be minimum ${min} and maximum ${max} characters`\n    );\n  }\n  if (input.includes(\"\\n\")) {\n    input = input.replace(/\\n+/g, \"\\n\").trim();\n  }\n\n  return input;\n}\n"]},"metadata":{},"sourceType":"module"}