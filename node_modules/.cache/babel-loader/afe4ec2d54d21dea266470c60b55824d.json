{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar RE2 = require('re2');\n\nvar ipRegex = require('ip-regex');\n\nvar tlds = require('tlds');\n/* istanbul ignore next */\n\n\nvar SafeRegExp = typeof RE2 === 'function' ? RE2 : RegExp;\nvar ipv4 = ipRegex.v4().source;\nvar ipv6 = ipRegex.v6().source;\n\nmodule.exports = function (options) {\n  options = _objectSpread({\n    exact: false,\n    strict: false,\n    auth: false,\n    localhost: true,\n    parens: false,\n    apostrophes: false,\n    trailingPeriod: false,\n    ipv4: true,\n    ipv6: true,\n    tlds: tlds,\n    returnString: false\n  }, options);\n  var protocol = \"(?:(?:[a-z]+:)?//)\".concat(options.strict ? '' : '?'); // Add option to disable matching urls with HTTP Basic Authentication\n  // <https://github.com/kevva/url-regex/pull/63>\n\n  var auth = options.auth ? '(?:\\\\S+(?::\\\\S*)?@)?' : '';\n  var host = \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\";\n  var domain = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\"; // Add ability to pass custom list of tlds\n  // <https://github.com/kevva/url-regex/pull/66>\n\n  var tld = \"(?:\\\\.\".concat(options.strict ? \"(?:[a-z\\\\u00a1-\\\\uffff]{2,})\" : \"(?:\".concat(options.tlds.sort(function (a, b) {\n    return b.length - a.length;\n  }).join('|'), \")\"), \")\").concat(options.trailingPeriod ? '\\\\.?' : '');\n  var port = '(?::\\\\d{2,5})?'; // Not accept closing parenthesis\n  // <https://github.com/kevva/url-regex/pull/35>\n  // Don't allow apostrophes\n  // <https://github.com/kevva/url-regex/pull/55>\n\n  var path = options.parens ? options.apostrophes ? '(?:[/?#][^\\\\s\"]*)?' : '(?:[/?#][^\\\\s\"\\']*)?' : options.apostrophes ? '(?:[/?#][^\\\\s\"\\\\)]*)?' : '(?:[/?#][^\\\\s\"\\\\)\\']*)?'; // Added IPv6 support\n  // <https://github.com/kevva/url-regex/issues/60>\n\n  var regex = \"(?:\".concat(protocol, \"|www\\\\.)\").concat(auth, \"(?:\");\n  if (options.localhost) regex += 'localhost|';\n  if (options.ipv4) regex += \"\".concat(ipv4, \"|\");\n  if (options.ipv6) regex += \"\".concat(ipv6, \"|\");\n  regex += \"\".concat(host).concat(domain).concat(tld, \")\").concat(port).concat(path); // Add option to return the regex string instead of a RegExp\n\n  if (options.returnString) return regex;\n  return options.exact ? new SafeRegExp(\"(?:^\".concat(regex, \"$)\"), 'i') : new SafeRegExp(regex, 'ig');\n};","map":{"version":3,"sources":["../src/index.js"],"names":["RE2","require","ipRegex","tlds","SafeRegExp","ipv4","ipv6","module","options","exact","strict","auth","localhost","parens","apostrophes","trailingPeriod","returnString","protocol","host","domain","tld","b","a","port","path","regex"],"mappings":"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","sourcesContent":["const RE2 = require('re2');\nconst ipRegex = require('ip-regex');\nconst tlds = require('tlds');\n\n/* istanbul ignore next */\nconst SafeRegExp = typeof RE2 === 'function' ? RE2 : RegExp;\nconst ipv4 = ipRegex.v4().source;\nconst ipv6 = ipRegex.v6().source;\n\nmodule.exports = (options) => {\n  options = {\n    exact: false,\n    strict: false,\n    auth: false,\n    localhost: true,\n    parens: false,\n    apostrophes: false,\n    trailingPeriod: false,\n    ipv4: true,\n    ipv6: true,\n    tlds,\n    returnString: false,\n    ...options\n  };\n\n  const protocol = `(?:(?:[a-z]+:)?//)${options.strict ? '' : '?'}`;\n  // Add option to disable matching urls with HTTP Basic Authentication\n  // <https://github.com/kevva/url-regex/pull/63>\n  const auth = options.auth ? '(?:\\\\S+(?::\\\\S*)?@)?' : '';\n  const host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\n  const domain =\n    '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\n  // Add ability to pass custom list of tlds\n  // <https://github.com/kevva/url-regex/pull/66>\n  const tld = `(?:\\\\.${\n    options.strict\n      ? '(?:[a-z\\\\u00a1-\\\\uffff]{2,})'\n      : `(?:${options.tlds.sort((a, b) => b.length - a.length).join('|')})`\n  })${options.trailingPeriod ? '\\\\.?' : ''}`;\n\n  const port = '(?::\\\\d{2,5})?';\n  // Not accept closing parenthesis\n  // <https://github.com/kevva/url-regex/pull/35>\n  // Don't allow apostrophes\n  // <https://github.com/kevva/url-regex/pull/55>\n  const path = options.parens\n    ? options.apostrophes\n      ? '(?:[/?#][^\\\\s\"]*)?'\n      : '(?:[/?#][^\\\\s\"\\']*)?'\n    : options.apostrophes\n    ? '(?:[/?#][^\\\\s\"\\\\)]*)?'\n    : '(?:[/?#][^\\\\s\"\\\\)\\']*)?';\n\n  // Added IPv6 support\n  // <https://github.com/kevva/url-regex/issues/60>\n  let regex = `(?:${protocol}|www\\\\.)${auth}(?:`;\n  if (options.localhost) regex += 'localhost|';\n  if (options.ipv4) regex += `${ipv4}|`;\n  if (options.ipv6) regex += `${ipv6}|`;\n  regex += `${host}${domain}${tld})${port}${path}`;\n\n  // Add option to return the regex string instead of a RegExp\n  if (options.returnString) return regex;\n\n  return options.exact\n    ? new SafeRegExp(`(?:^${regex}$)`, 'i')\n    : new SafeRegExp(regex, 'ig');\n};\n"]},"metadata":{},"sourceType":"script"}